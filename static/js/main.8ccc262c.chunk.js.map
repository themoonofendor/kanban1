{"version":3,"sources":["images/trash.svg","images/pencil.svg","images/blocker.svg","images/critical.svg","images/major.svg","images/minor.svg","images/trivial.svg","images/plus.svg","images/menu.svg","images/rhombus.svg","images/search.svg","images/plusWhite.svg","images/help.svg","images/user.svg","utils/Constants.js","components/modals/EditTaskModal.js","components/modals/RemoveTaskModal.js","components/Task.js","utils/TaskUtil.js","components/Board.js","components/modals/CreateTaskModal.js","components/TopBar.js","components/PrimaryLeftSidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultStatus","defaultProject","defaultTasks","id","uid","project","priority","index","status","title","EditTaskModal","props","useState","task","currentTaskName","setCurrentTaskName","currentProject","setCurrentProject","String","currentPriority","setCurrentPriority","handleClose","setEditTaskMode","Modal","show","isEditTaskMode","onHide","centered","Header","closeButton","Title","Body","className","htmlFor","type","placeholder","value","onChange","e","target","Footer","Button","onClick","Number","editTask","onClickSaveChanges","disabled","trim","RemoveTaskModal","setRemoveTaskMode","isRemoveTaskMode","removeTask","Task","key","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","style","isDragging","draggableStyle","backgroundColor","appliedClass","showProject","src","blocker","alt","critical","major","minor","trivial","showPriority","pencil","trash","getSortedTasksByStatus","tasks","columnStatus","filter","el","sort","a","b","getSortedTodoTasks","getSortedInProgressTasks","getSortedReviewTasks","getSortedDoneTasks","Board","getComponentByStatus","droppableId","droppableProps","isDraggingOver","length","map","onDragEnd","result","source","destination","reorderedTasks","newTasks","getReorderedTasks","updateTasks","CreateTaskModal","setCreateTaskMode","isCreateTaskMode","createTask","TopBar","plus","href","menu","PrimaryLeftSidebar","width","height","rhombus","search","help","user","App","setTasks","position","textAlign","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","push","toast","success","updatedTasks","taskToBeRemoved","removeTaskAndReorderTasks","editedTask","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ccc262c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash.d98b87f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/pencil.ddbb4693.svg\";","module.exports = __webpack_public_path__ + \"static/media/blocker.11907afe.svg\";","module.exports = __webpack_public_path__ + \"static/media/critical.8880f1fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/major.0f285b32.svg\";","module.exports = __webpack_public_path__ + \"static/media/minor.cdf6fc51.svg\";","module.exports = __webpack_public_path__ + \"static/media/trivial.163f67f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.7b65c534.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu.b243f90c.svg\";","module.exports = __webpack_public_path__ + \"static/media/rhombus.3cc612a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.2e0925c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/plusWhite.49b3a28c.svg\";","module.exports = __webpack_public_path__ + \"static/media/help.d7322dc2.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.89716896.svg\";","import {v4 as uid} from 'uuid';\n\nexport const defaultStatus = {todo: 'To Do', inProgress: 'In Progress', review: 'Review', done: 'Done'};\n\nexport const defaultProject = {\n    seedAdv: 'Seed Adv Management',\n    techOps: 'TechOps (TOPS)',\n    rcData: 'RC Data',\n    businessSys: 'Business Systems',\n    vd2: 'VD2 Web & UX'\n};\n\nexport const defaultTasks = [\n    {\n        id: uid(),\n        project: defaultProject.seedAdv,\n        priority: 2,\n        index: 0,\n        status: defaultStatus.todo,\n        title: 'Create Kanban board using React js'\n    },\n    {\n        id: uid(),\n        project: defaultProject.vd2,\n        priority: 4,\n        index: 0,\n        status: defaultStatus.inProgress,\n        title: 'Update bootstrap version from 4.4.3 to 4.5.0'\n    },\n    {\n        id: uid(),\n        project: defaultProject.seedAdv,\n        priority: 0,\n        index: 0,\n        status: defaultStatus.review,\n        title: 'Fix user authentication on production build'\n    },\n    {\n        id: uid(),\n        project: defaultProject.vd2,\n        priority: 1,\n        index: 0,\n        status: defaultStatus.done,\n        title: 'Submit button became disabled after 1 min. of inactivity'\n    },\n    {\n        id: uid(),\n        project: defaultProject.vd2,\n        priority: 2,\n        index: 2,\n        status: defaultStatus.todo,\n        title: 'JS error clicking on \\'Create new Batch\\''\n    },\n    {\n        id: uid(),\n        project: defaultProject.rcData,\n        priority: 1,\n        index: 1,\n        status: defaultStatus.todo,\n        title: 'Add new schema for QA build'\n    },\n    {\n        id: uid(),\n        project: defaultProject.businessSys,\n        priority: 3,\n        index: 3,\n        status: defaultStatus.todo,\n        title: 'Create new H1 styles on Task page'\n    },\n    {\n        id: uid(),\n        project: defaultProject.techOps,\n        priority: 2,\n        index: 1,\n        status: defaultStatus.inProgress,\n        title: 'Populate RC data to pct_event_g table'\n    },\n    {\n        id: uid(),\n        project: defaultProject.businessSys,\n        priority: 0,\n        index: 1,\n        status: defaultStatus.done,\n        title: 'Create pipeline for performance testing'\n    },\n    {\n        id: uid(),\n        project: defaultProject.vd2,\n        priority: 3,\n        index: 2,\n        status: defaultStatus.inProgress,\n        title: 'Incorrect translation of word \\'slice\\' for locale Ru'\n    },\n    {\n        id: uid(),\n        project: defaultProject.seedAdv,\n        priority: 2,\n        index: 1,\n        status: defaultStatus.review,\n        title: 'Create documentation for the new client \\'Pear inc..\\''\n    },\n    {\n        id: uid(),\n        project: defaultProject.techOps,\n        priority: 1,\n        index: 4,\n        status: defaultStatus.todo,\n        title: 'Create new instance for QA environment '\n    }\n];","import React, {useState} from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {defaultProject} from \"../../utils/Constants\";\n\nfunction EditTaskModal(props) {\n\n    const [currentTaskName, setCurrentTaskName] = useState(props.task.title);\n    const [currentProject, setCurrentProject] = useState(props.task.project);\n    const [currentPriority, setCurrentPriority] = useState(String(props.task.priority));\n\n    const onTaskNameChange = (e) => {\n        setCurrentTaskName(e.target.value);\n    };\n\n    const onProjectChange = (e) => {\n        setCurrentProject(e.target.value);\n    };\n\n    const onPriorityChange = (e) => {\n        setCurrentPriority(e.target.value);\n    };\n\n    const handleClose = () => props.setEditTaskMode(false);\n\n    const onClickSaveChanges = () => {\n        const task = {\n            id: props.task.id,\n            project: currentProject,\n            priority: Number(currentPriority),\n            index: props.task.index,\n            status: props.task.status,\n            title: currentTaskName\n        };\n        handleClose();\n        props.editTask(task);\n    };\n\n    return (\n        <Modal show={props.isEditTaskMode} onHide={handleClose} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Task</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"form-group\">\n                    <label htmlFor=\"formInput\">Task</label>\n                    <input type=\"text\" className=\"form-control\" id=\"formInput\"\n                           placeholder=\"Enter task name...\" value={currentTaskName} onChange={onTaskNameChange}/>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"formSelectProject\">Project</label>\n                    <select id=\"formSelectProject\" className=\"custom-select\" value={currentProject}\n                            onChange={onProjectChange}>\n                        <option value={defaultProject.seedAdv}>{defaultProject.seedAdv}</option>\n                        <option value={defaultProject.seedAdv}>{defaultProject.businessSys}</option>\n                        <option value={defaultProject.techOps}>{defaultProject.techOps}</option>\n                        <option value={defaultProject.rcData}>{defaultProject.rcData}</option>\n                        <option value={defaultProject.vd2}>{defaultProject.vd2}</option>\n                    </select>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"formSelectPriority\">Priority</label>\n                    <select id=\"formSelectPriority\" className=\"custom-select\" value={currentPriority}\n                            onChange={onPriorityChange}>\n                        <option value=\"0\">Blocker - P0</option>\n                        <option value=\"1\">Critical - P1</option>\n                        <option value=\"2\">Major - P2</option>\n                        <option value=\"3\">Minor - P3</option>\n                        <option value=\"4\">Trivial - P4</option>\n                    </select>\n                </div>\n\n            </Modal.Body>\n            <Modal.Footer>\n                <Button className=\"btn btn-light my-button\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button className=\"btn btn-light my-button\" onClick={() => onClickSaveChanges()}\n                        disabled={!currentTaskName.trim()}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default EditTaskModal;","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction RemoveTaskModal(props) {\n\n    const handleClose = () => props.setRemoveTaskMode(false);\n\n    const onClickDelete = () => {\n        props.setRemoveTaskMode(false)\n        props.removeTask(props.task);\n    };\n\n    return (\n        <Modal show={props.isRemoveTaskMode} onHide={handleClose} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Are you sure you wish to delete this task?</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{props.task.title}</Modal.Body>\n            <Modal.Footer>\n                <Button className=\"btn btn-light my-button\" onClick={handleClose}>\n                    Cancel\n                </Button>\n                <Button className=\"btn btn-light my-button\" onClick={() => onClickDelete()}>\n                    Delete\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default RemoveTaskModal;","import React, {useState} from \"react\";\nimport {Draggable} from \"react-beautiful-dnd\";\nimport trash from '../images/trash.svg'\nimport pencil from '../images/pencil.svg'\nimport blocker from '../images/blocker.svg'\nimport critical from '../images/critical.svg'\nimport major from '../images/major.svg'\nimport minor from '../images/minor.svg'\nimport trivial from '../images/trivial.svg'\nimport EditTaskModal from \"./modals/EditTaskModal\";\nimport {defaultProject} from \"../utils/Constants\";\nimport RemoveTaskModal from \"./modals/RemoveTaskModal\";\n\nfunction Task(props) {\n\n    const showProject = () => {\n        let appliedClass;\n        switch (props.task.project) {\n            case defaultProject.seedAdv:\n                appliedClass = 'badge-warning';\n                break;\n            case defaultProject.techOps:\n                appliedClass = 'badge-info';\n                break;\n            case defaultProject.rcData:\n                appliedClass = 'badge-danger';\n                break;\n            case defaultProject.businessSys:\n                appliedClass = 'badge-success';\n                break;\n            default:\n                appliedClass = 'badge-primary';\n        }\n        return <span className={`badge ${appliedClass} mb-2`}>{props.task.project}</span>\n    };\n\n    const showPriority = () => {\n        switch (props.task.priority) {\n            case 0:\n                return <>P{props.task.priority} <img className=\"priority-ic mb-1\" src={blocker} alt=\"Blocker\"/></>\n            case 1:\n                return <>P{props.task.priority} <img className=\"priority-ic mb-1\" src={critical} alt=\"Critical\"/></>\n            case 2:\n                return <>P{props.task.priority} <img className=\"priority-ic mb-1\" src={major} alt=\"Major\"/></>\n            case 3:\n                return <>P{props.task.priority} <img className=\"priority-ic mb-1\" src={minor} alt=\"Minor\"/></>\n            default:\n                return <>P{props.task.priority} <img className=\"priority-ic mb-1\" src={trivial} alt=\"Trivial\"/></>\n        }\n    }\n\n    const [isEditTaskMode, setEditTaskMode] = useState(false);\n    const [isRemoveTaskMode, setRemoveTaskMode] = useState(false);\n\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        backgroundColor: isDragging ? '#f5f8f8' : 'white',\n        ...draggableStyle\n    });\n\n    const onClickRemoveTask = () => {\n        setRemoveTaskMode(true);\n    };\n\n    const onClickEditTask = () => {\n        setEditTaskMode(true)\n    };\n\n    return (\n        <Draggable key={props.task.id} draggableId={props.task.id} index={props.task.index}>\n            {\n                (provided, snapshot) => {\n                    return (<div className=\"card m-2\" {...provided.draggableProps}\n                                 {...provided.dragHandleProps} ref={provided.innerRef} style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                    )}>\n                        <EditTaskModal isEditTaskMode={isEditTaskMode} setEditTaskMode={setEditTaskMode}\n                                       task={props.task} editTask={props.editTask}/>\n\n                        <RemoveTaskModal isRemoveTaskMode={isRemoveTaskMode} setRemoveTaskMode={setRemoveTaskMode}\n                                         task={props.task} removeTask={props.removeTask}/>\n                        <div className=\"card-body\">\n                            <p>{props.task.title}</p>\n                            {showProject()}\n                            <div className=\"row\">\n                                <div className=\"col-8 my-auto\">\n                                    {showPriority()}\n                                </div>\n                                <div className=\"col-2\" onClick={() => onClickEditTask()}>\n                                    <img className=\"icon\" src={pencil} alt=\"Edit\"/>\n                                </div>\n                                <div className=\"col-2\" onClick={() => onClickRemoveTask()}>\n                                    <img className=\"icon\" src={trash} alt=\"Trash\"/>\n                                </div>\n                            </div>\n                        </div>\n                    </div>);\n                }\n            }\n        </Draggable>\n    );\n}\n\nexport default Task;","import {defaultStatus} from './Constants';\n\nexport const getSortedTodoTasks = (tasks) => tasks.filter(el => el.status === defaultStatus.todo).sort((a, b) => a.index - b.index);\nexport const getSortedInProgressTasks = (tasks) => tasks.filter(el => el.status === defaultStatus.inProgress).sort((a, b) => a.index - b.index);\nexport const getSortedReviewTasks = (tasks) => tasks.filter(el => el.status === defaultStatus.review).sort((a, b) => a.index - b.index);\nexport const getSortedDoneTasks = (tasks) => tasks.filter(el => el.status === defaultStatus.done).sort((a, b) => a.index - b.index);\n\nexport const getSortedTasksByStatus = (tasks, columnStatus) => {\n    switch (columnStatus) {\n        case defaultStatus.todo:\n            return [...getSortedTodoTasks(tasks)];\n        case defaultStatus.inProgress:\n            return [...getSortedInProgressTasks(tasks)];\n        case defaultStatus.review:\n            return [...getSortedReviewTasks(tasks)];\n        default:\n            return [...getSortedDoneTasks(tasks)];\n    }\n};\n\nexport const getReorderedTasks = (source, destination, draggableId, tasks) => {\n    if (source.droppableId === destination.droppableId) {\n        const newTasks = [...tasks];\n\n        if (destination.index < source.index) {\n            newTasks.map(el => {\n                if (el.status === source.droppableId && el.index >= destination.index && el.index < source.index) {\n                    el.index = el.index + 1\n                }\n                return el;\n            });\n        } else {\n            newTasks.map((el) => {\n                if (el.status === source.droppableId && el.index <= destination.index && el.index > source.index) {\n                    el.index = el.index - 1\n                }\n                return el;\n            });\n        }\n\n        newTasks.map((el) => {\n            if (el.status === source.droppableId && el.id === draggableId) {\n                el.index = destination.index;\n            }\n            return el;\n        });\n        return newTasks;\n    } else {\n\n        const newTasks = tasks.map((el) => {\n            if (el.status === source.droppableId && el.index > source.index) {\n                el.index = el.index - 1;\n            } else if (el.status === destination.droppableId && el.index >= destination.index) {\n                el.index = el.index + 1;\n            }\n            return el;\n        });\n\n        newTasks.map(el => {\n            if (el.id === draggableId) {\n                el.status = destination.droppableId;\n                el.index = destination.index;\n            }\n            return el;\n        });\n        return newTasks;\n\n    }\n}\n\nexport const removeTaskAndReorderTasks = (tasks, taskToBeRemoved) => {\n    // eslint-disable-next-line array-callback-return\n    return tasks.filter(el => {\n        if (el.status === taskToBeRemoved.status) {\n            if (el.index > taskToBeRemoved.index) {\n                el.index = el.index - 1;\n            }\n            if (el.id !== taskToBeRemoved.id) {\n                return el;\n            }\n        } else {\n            return el;\n        }\n    });\n};","import React from \"react\";\nimport {DragDropContext, Droppable} from \"react-beautiful-dnd\";\nimport {defaultStatus} from \"../utils/Constants\";\nimport Task from \"./Task\";\nimport {getReorderedTasks, getSortedTasksByStatus} from \"../utils/TaskUtil\";\n\nfunction Board(props) {\n\n    const getListStyle = (isDraggingOver) => ({\n        backgroundColor: isDraggingOver ? '#d7dadc' : '#eff2f4'\n    });\n\n    const getComponentByStatus = (tasks, status) => {\n        return <>\n            <Droppable droppableId={status}>\n                {(provided, snapshot) => {\n                    return (\n                        <div {...provided.droppableProps} style={getListStyle(snapshot.isDraggingOver)}\n                             ref={provided.innerRef}\n                             className=\"col bg-color-secondary h-auto ml-3 mr-3 pt-2 rounded no-padding\">\n                            <span\n                                className=\"status-col-title m-2\">{status} {getSortedTasksByStatus(tasks, status).length}{status === defaultStatus.done ? ' of ' + tasks.length : null}</span>\n                            {getSortedTasksByStatus(tasks, status).map((el, index) => {\n                                return <Task key={el.id} task={el} index={index} removeTask={props.removeTask}\n                                             editTask={props.editTask}/>\n                            })}\n                            {provided.placeholder}\n                        </div>\n                    );\n                }}\n            </Droppable>\n        </>\n    };\n\n    const onDragEnd = result => {\n        const {draggableId, source, destination} = result;\n\n        if (!destination) {\n            return;\n        }\n        const reorderedTasks = getReorderedTasks(source, destination, draggableId, props.tasks);\n        props.updateTasks(reorderedTasks);\n    };\n\n    return (\n        <div className=\"row h-100\">\n            <DragDropContext onDragEnd={onDragEnd}>\n                {getComponentByStatus(props.tasks, defaultStatus.todo)}\n                {getComponentByStatus(props.tasks, defaultStatus.inProgress)}\n                {getComponentByStatus(props.tasks, defaultStatus.review)}\n                {getComponentByStatus(props.tasks, defaultStatus.done)}\n            </DragDropContext>\n        </div>\n    );\n};\n\nexport default Board;","import React, {useState} from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {defaultProject, defaultStatus} from \"../../utils/Constants\";\nimport {v4 as uid} from \"uuid\";\n\nfunction CreateTaskModal(props) {\n\n    const [currentTaskName, setCurrentTaskName] = useState('');\n    const [currentProject, setCurrentProject] = useState(defaultProject.seedAdv);\n    const [currentPriority, setCurrentPriority] = useState('3');\n\n    const handleClose = () => {\n        setCurrentTaskName('');\n        setCurrentProject(defaultProject.seedAdv);\n        setCurrentPriority('3');\n        props.setCreateTaskMode(false);\n    }\n\n    const onTaskNameChange = (e) => {\n        setCurrentTaskName(e.target.value);\n    };\n\n    const onProjectChange = (e) => {\n        setCurrentProject(e.target.value);\n    };\n\n    const onPriorityChange = (e) => {\n        setCurrentPriority(e.target.value);\n    };\n\n    const onClickSaveChanges = () => {\n        const task = {\n            id: uid(),\n            project: currentProject,\n            priority: Number(currentPriority),\n            index: 0,\n            status: defaultStatus.todo,\n            title: currentTaskName\n        };\n        handleClose();\n        props.createTask(task);\n    };\n\n    return (\n        <Modal show={props.isCreateTaskMode} onHide={handleClose} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>Create New Task</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"form-group\">\n                    <label htmlFor=\"formInput\">Task</label>\n                    <input type=\"text\" className=\"form-control\" id=\"formInput\"\n                           placeholder=\"Enter task name...\" value={currentTaskName} onChange={onTaskNameChange}/>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"formSelectProject\">Project</label>\n                    <select id=\"formSelectProject\" className=\"custom-select\" value={currentProject}\n                            onChange={onProjectChange}>\n                        <option value={defaultProject.seedAdv}>{defaultProject.seedAdv}</option>\n                        <option value={defaultProject.seedAdv}>{defaultProject.businessSys}</option>\n                        <option value={defaultProject.techOps}>{defaultProject.techOps}</option>\n                        <option value={defaultProject.rcData}>{defaultProject.rcData}</option>\n                        <option value={defaultProject.vd2}>{defaultProject.vd2}</option>\n                    </select>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"formSelectPriority\">Priority</label>\n                    <select id=\"formSelectPriority\" className=\"custom-select\" value={currentPriority}\n                            onChange={onPriorityChange}>\n                        <option value=\"0\">Blocker - P0</option>\n                        <option value=\"1\">Critical - P1</option>\n                        <option value=\"2\">Major - P2</option>\n                        <option value=\"3\">Minor - P3</option>\n                        <option value=\"4\">Trivial - P4</option>\n                    </select>\n                </div>\n\n            </Modal.Body>\n            <Modal.Footer>\n                <Button className=\"btn btn-light my-button\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button className=\"btn btn-light my-button\" onClick={() => onClickSaveChanges()} disabled={!currentTaskName.trim()}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CreateTaskModal;","import React, {useState} from \"react\";\nimport plus from \"../images/plus.svg\";\nimport menu from \"../images/menu.svg\";\nimport CreateTaskModal from \"./modals/CreateTaskModal\";\n\nfunction TopBar(props) {\n\n    const [isCreateTaskMode, setCreateTaskMode] = useState(false);\n\n    const onClickCreateTask = () => {\n        setCreateTaskMode(true);\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-3 p-0\">\n                    <h1 className=\"h1\">Board</h1>\n                </div>\n\n                <div className=\"col-9 align-content-end text-right pr-0\">\n                    <CreateTaskModal isCreateTaskMode={isCreateTaskMode} setCreateTaskMode={setCreateTaskMode} createTask={props.createTask}/>\n                    <div className=\"container-fluid pr-0\">\n                        <button type=\"button\" className=\"btn btn-light my-button\" onClick={() => onClickCreateTask()}>\n                            Create <img src={plus} alt=\"Create\"/>\n                        </button>\n                        <a href='/#'><img className='priority-ic ml-4' src={menu} alt='Menu'/></a>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default TopBar;","import React from \"react\";\nimport rhombus from '../images/rhombus.svg'\nimport search from '../images/search.svg'\nimport plus from '../images/plusWhite.svg'\nimport help from '../images/help.svg'\nimport user from '../images/user.svg'\n\nfunction PrimaryLeftSidebar() {\n    return (\n        <div className=\"col-1-w h-100 bg-color-primary\">\n            <div className=\"text-center mt-4 mb-5\"><a href=\"/#\"><img width='42px' height='42px' src={rhombus}\n                                                                     alt=\"Logo\"/></a></div>\n            <div className=\"text-center mt-5\"><a href=\"/#\"><img width='28px' height='28px' src={search}\n                                                                alt=\"Search\"/></a></div>\n            <div className=\"text-center mt-4\"><a href=\"/#\"><img width='42px' height='42px' src={plus} alt=\"Add\"/></a>\n            </div>\n            <div className=\"text-center mt-4 help-wrapper w-100 mb-4\"><a href=\"/#\"><img width='28px' height='28px'\n                                                                                        src={help} alt=\"Help\"/></a>\n            </div>\n            <div className=\"text-center mt-4 profile-wrapper w-100 mb-4\"><a href=\"/#\"><img width='42px' height='42px'\n                                                                                           src={user} alt=\"User\"/></a>\n            </div>\n        </div>\n    );\n};\n\nexport default PrimaryLeftSidebar;","import React, {useState} from 'react';\nimport './App.css';\nimport {defaultTasks} from \"./utils/Constants\";\nimport Board from \"./components/Board\";\nimport {removeTaskAndReorderTasks} from \"./utils/TaskUtil\";\nimport TopBar from \"./components/TopBar\";\nimport {toast, ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport PrimaryLeftSidebar from \"./components/PrimaryLeftSidebar\";\n\nfunction App() {\n\n    const [tasks, setTasks] = useState(defaultTasks);\n\n    const updateTasks = (updatedTasks) => {\n        setTasks(updatedTasks);\n    };\n\n    const removeTask = (taskToBeRemoved) => {\n        const newTasks = removeTaskAndReorderTasks(tasks, taskToBeRemoved);\n        setTasks(newTasks);\n        toast.success('Successfully Deleted!');\n    };\n\n    const createTask = (task) => {\n        const newTasks = tasks.map(el => {\n            if (el.status === task.status) {\n                el.index = el.index + 1;\n            }\n            return el;\n        });\n        newTasks.push(task);\n        setTasks(newTasks);\n        toast.success('Successfully Created!');\n    };\n\n    const editTask = (editedTask) => {\n        const newTasks = [...tasks].map(el => {\n            if (el.id === editedTask.id) {\n                el.title = editedTask.title;\n                el.project = editedTask.project;\n                el.priority = editedTask.priority;\n            }\n            return el;\n        });\n        console.log(newTasks);\n        setTasks(newTasks);\n        toast.success('Successfully Saved!');\n    };\n\n    return (\n        <>\n            <ToastContainer\n                position=\"top-right\"\n                style={{textAlign: 'center'}}\n                autoClose={5000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick={false}\n                rtl={false}\n                pauseOnFocusLoss\n                draggable={true}\n                pauseOnHover={false}/>\n\n            <PrimaryLeftSidebar/>\n            <div className=\"col-3-w\">\n                <TopBar createTask={createTask}/>\n                <Board tasks={tasks} updateTasks={updateTasks} removeTask={removeTask} editTask={editTask}/>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}